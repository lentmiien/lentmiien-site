extends layout

block content
  .row
    .col
      ul#myTab.nav.nav-tabs(role="tablist")
        li.nav-item(role="presentation")
          button#settings-tab.nav-link(data-bs-toggle="tab", data-bs-target="#settings", type="button", role="tab", aria-controls="settings", aria-selected="false") Settings
        li.nav-item(role="presentation")
          button#chat-tab.nav-link.active(data-bs-toggle="tab", data-bs-target=`#chat`, type="button", role="tab", aria-controls=`chat`, aria-selected="true") Chat
        li.nav-item(role="presentation")
          button#templates-tab.nav-link(data-bs-toggle="tab", data-bs-target=`#templates`, type="button", role="tab", aria-controls=`templates`, aria-selected="false") Templates
        li.nav-item(role="presentation")
          button#knowledge-tab.nav-link(data-bs-toggle="tab", data-bs-target=`#knowledge`, type="button", role="tab", aria-controls=`knowledge`, aria-selected="false") Knowledge
        li.nav-item(role="presentation")
          button#blog-tab.nav-link(data-bs-toggle="tab", data-bs-target=`#blog`, type="button", role="tab", aria-controls=`blog`, aria-selected="false") Blog
        li.nav-item(role="presentation")
          button#healthlog-tab.nav-link(data-bs-toggle="tab", data-bs-target=`#healthlog`, type="button", role="tab", aria-controls=`healthlog`, aria-selected="false") Health log
        li.nav-item(role="presentation")
          button#rawchat-tab.nav-link(data-bs-toggle="tab", data-bs-target=`#rawchat`, type="button", role="tab", aria-controls=`rawchat`, aria-selected="false") Raw chat
        li.nav-item(role="presentation")
          button#htmlchat-tab.nav-link(data-bs-toggle="tab", data-bs-target=`#htmlchat`, type="button", role="tab", aria-controls=`htmlchat`, aria-selected="false") HTML chat
        li.nav-item(role="presentation")
          button#chatgroup-tab.nav-link(data-bs-toggle="tab", data-bs-target=`#chatgroup`, type="button", role="tab", aria-controls=`chatgroup`, aria-selected="false") Chat group
      .tab-content
        #settings.tab-pane.fade(role="tabpanel" aria-labelledby="settings-tab")
          .row 
            .col
              h3 Chat
              label(for="tooltitle") Title
              input#tooltitle.form-control(type="text", name="tooltitle", value=`${conversation.title}`)
              .form-group
                label(for='toolcategory') Category
                .input-group.mb-3
                  input#toolcategory.form-control(type='text', placeholder='Enter category', name='toolcategory', aria-label='Category', value=`${conversation.category}`)
                  .input-group-append
                    .dropdown
                      button.btn.btn-outline-secondary.dropdown-toggle(type='button', data-bs-toggle='dropdown', aria-expanded="false")
                      ul.dropdown-menu
                        each val in categories
                          li
                            a.dropdown-item(href='#', onclick=`setCategory('toolcategory', '${val}')`) #{val}
              .form-group
                label(for='tooltags') Tags (comma separated)
                .input-group.mb-3
                  input#tooltags.form-control(type='text', placeholder='Enter tags', name='tooltags', aria-label='Tags', value=`${conversation.tags.join(',')}`)
                  .input-group-append
                    .dropdown
                      button.btn.btn-outline-secondary.dropdown-toggle(type='button', data-bs-toggle='dropdown', aria-expanded="false")
                      ul.dropdown-menu
                        each val in tags
                          li
                            a.dropdown-item(href='#', onclick=`setTag('tooltags', '${val.label}')`) #{val.label} (#{val.count})
              label(for="toolcontext") Context
              textarea#toolcontext.form-control(name="toolcontext", cols="30", rows="10")= `${conversation.context_prompt}`
          .row 
            .col 
              h3 Image
              label(for="toolquality") Image quality 
              select#toolquality.form-control(name="toolquality") 
                option(value="hd") High Quality
                option(value="standard") Standard
              label(for="toolsize") Image size 
              select#toolsize.form-control(name="toolsize") 
                option(value="1024x1024") 1024x1024
                option(value="1792x1024") 1792x1024
                option(value="1024x1792") 1024x1792
            .col
              h3 TTS
              label(for="toolttsmodel") TTS Model 
              select#toolttsmodel.form-control(name="toolttsmodel") 
                option(value="tts-1") Text-To-Speech 1
                option(value="tts-1-hd") Text-To-Speech 1 HD
              label(for="toolvoice") TTS Voice 
              select#toolvoice.form-control(name="toolvoice") 
                option(value="nova") Nova
                option(value="alloy") Alloy
                option(value="echo") Echo
                option(value="fable") Fable
                option(value="onyx") Onyx
                option(value="shimmer") Shimmer
          .row 
            .col.button-container.mt-2 
              button.btn.btn-primary(onclick="UpdateSettings()") Update
              button.btn.btn-warning(onclick=`SaveConversationSettings("${conversation._id.toString()}")`) Save changes to database
              button.btn.btn-success(onclick=`DoneConversation("${conversation._id.toString()}")`) Mark as done
              a.btn.btn-danger(href=`/chat4/delete_conversation/${conversation._id.toString()}`) Delete conversation
      .tab-content
        #chat.tab-pane.fade.show.active(role="tabpanel" aria-labelledby="chat-tab")
          h3#chattitle= conversation.title
          form#chatform(action=`/chat4/post/${conversation._id.toString()}`, method="post", enctype="multipart/form-data") 
            input#title(type="hidden", name="title", value=`${conversation.title}`, novalidate)
            input#category(type="hidden", name="category", value=`${conversation.category}`, novalidate)
            input#tags(type="hidden", name="tags", value=`${conversation.tags.join(',')}`, novalidate)
            label(for="imgs") Upload an image (JPEG, PNG, WebP, AVIF, GIF, SVG or TIFF)
            input#imgs.form-control(type="file", name="imgs", multiple)
            textarea#context(style="display:none;", name="context", cols="30", rows="10", novalidate)= `${conversation.context_prompt}`
            label(for="prompt") Prompt
            textarea#prompt.form-control(name="prompt", cols="30", rows="10", required)
            if conversation.default_model 
              label(for="provider")= `Current: ${conversation.default_model}`
            select#provider.form-control(name="provider") 
              optgroup(label="Current")
                option(value="OpenAI_latest") OpenAI (2024-11-20)
                option(value="OpenAI_mini") OpenAI mini
                option(value="Anthropic") Anthropic
                option(value="o1-2024-12-17") OpenAI o1
                option(value="o1-preview-2024-09-12") OpenAI o1 preview
                option(value="o1-mini-2024-09-12") OpenAI o1 mini
              optgroup(label="Groq")
                option(value="GroqV-llama-3.2-90b-vision-preview") llama-3.2-90b [VISION]
                option(value="Groq-llama-3.3-70b-versatile") llama-3.3-70b [TEXT]
                option(value="GroqV-llama-3.2-11b-vision-preview") llama-3.2-11b [VISION]
                option(value="Groq-llama-3.1-8b-instant") llama-3.1-8b [TEXT]
                option(value="Groq-llama-3.2-3b-preview") llama-3.2-3b [TEXT]
                option(value="Groq-llama-3.2-1b-preview") llama-3.2-1b [TEXT]
                option(value="Groq-mixtral-8x7b-32768") mixtral-8x7b [TEXT]
                option(value="Groq-gemma2-9b-it") gemma2-9b [TEXT]
              optgroup(label="Google")
                option(value="Google-gemini-2.0-flash-exp") Gemini 2.0 Flash Experimental
                option(value="Google-gemini-1.5-flash") Gemini 1.5 Flash
                option(value="Google-gemini-1.5-pro") Gemini 1.5 Pro
              optgroup(label="Legacy")
                option(value="OpenAI") OpenAI
            .button-container
              button.btn.btn-success(type="button", onclick="RunImageForm()") Image
              button.btn.btn-danger(type="button", onclick="ImageTool()") Image Tool
              button.btn.btn-success(type="button", onclick="RunSoundForm()") Sound
              input.btn.btn-primary(type="submit", value="Prompt", onclick="showLoadingPopup()")
              button.btn.btn-secondary(type="button", onclick="Batch()") Batch
              button.btn.btn-warning(type="button", onclick="AI_Prompt()", title="AI will try to refine the prompt for you") AI Prompt
              button.btn.btn-warning(type="button", onclick="AI_Suggest()", title="AI will suggest a prompt for you") AI Suggest
              .btn-group
                select#agent_select.form-control(name='agent_select', aria-label='agent_select')
                  option(value="") -- Select an agent --
                  each a in agents 
                    option(value=a._id.toString())= a.name
                .input-group-append
                  .dropdown
                    button.btn.btn-outline-secondary.dropdown-toggle(type='button', data-bs-toggle='dropdown', aria-expanded="false")
                    ul.dropdown-menu
                      li
                        a.dropdown-item(href='#', onclick=`Agent('agent_select','teach')`) Teach
                        a.dropdown-item(href='#', onclick=`Agent('agent_select','ask')`) Ask
            #knowledge_container.row
              each ki in conversation.knowledge_injects
                .col(id=ki.knowledge_id)
                  input(type="checkbox", checked, value=ki.knowledge_id, name="knowledge", data-id=ki.knowledge_id, data-title=knowledges[knowledge_id_to_index[ki.knowledge_id]].title, onclick="knowledgeCheck(this)")
                  span= ` ${knowledges[knowledge_id_to_index[ki.knowledge_id]].title} `
                  select(id=`knowledge_${ki.knowledge_id}`, name=`knowledge_${ki.knowledge_id}`) 
                    option(value="context", selected=(ki.use_type === "context")) Context 
                    option(value="reference", selected=(ki.use_type === "reference")) Reference 
                    option(value="example", selected=(ki.use_type === "example")) Example 
            div 
              each m in messages
                div 
                  p.header-row 
                    input(id=`end_${m._id.toString()}`, type="radio", name="end_message", value=`${m._id.toString()}`)
                    span  New conversation end
                  .assistant!= m.response_html
                    a(href=`/chat4/redact/${m._id.toString()}?conversation=${conversation._id.toString()}`) Redact
                  if m.sound.length > 0
                    audio(controls)
                      source(src=`/mp3/${m.sound}`, type="audio/mpeg")
                  if m.images.length > 0
                    each img in m.images
                      div
                        div.chat4_img_wrapper
                          img.chat4_img(src=`/img/${img.filename}`, alt="image", onclick="showModalPopup(this)")
                        input.chat4_img_slide(id=`${img.filename}` type="range", name=`${img.filename}`, min="0", max="2", step="1", value=`${img.use_flag === 'high quality' ? 2 : (img.use_flag === 'low quality' ? 1 : 0)}`)
                  .user!= m.prompt_html
                    a(href=`/chat4/redact/${m._id.toString()}?conversation=${conversation._id.toString()}`) Redact
                  p.header-row 
                    input(id=`start_${m._id.toString()}`, type="radio", name="start_message", value=`${m._id.toString()}`)
                    span  New conversation start/Select for image and sound generation
          form#image_form(action=`/chat4/generate_image/${conversation._id.toString()}`, method="post")
            input#image_message_id(type="hidden", name="image_message_id")
            input#image_quality(type="hidden", name="image_quality", value="hd")
            input#image_size(type="hidden", name="image_size", value="1024x1024")
            textarea#image_prompt(style="display:none;", name="image_prompt", cols="30", rows="10")
          form#sound_form(action=`/chat4/generate_sound/${conversation._id.toString()}`, method="post")
            input#sound_message_id(type="hidden", name="sound_message_id")
            input#sound_model(type="hidden", name="sound_model", value="tts-1")
            input#sound_voice(type="hidden", name="sound_voice", value="nova")
            textarea#sound_prompt(style="display:none;", name="sound_prompt", cols="30", rows="10")
      .tab-content
        #templates.tab-pane.fade(role="tabpanel" aria-labelledby="templates-tab")
          .row 
            .col
              h3 Templates
              label(for="prompt_template") Chat prompt 
              select#prompt_template.form-control(name="prompt_template", onchange="SetChatTemplate(this)") 
                option(value="") -Select-
                each t in templates
                  if t.Type === "chat" || t.Type === "image"
                    option(value=`${t.TemplateText}`)= `[${t.Category}] ${t.Title}` 
              label(for="context_template") Context prompt 
              select#context_template.form-control(name="context_template", onchange="SetContextTemplate(this)") 
                option(value="") -Select-
                each t in templates
                  if t.Type === "context"
                    option(value=`${t.TemplateText}`)= `[${t.Category}] ${t.Title}` 
              hr
              h3 Knowledges 
              each cat in knowledges_categories
                b= cat
                .row
                  each knowledge in knowledges 
                    if cat === knowledge.category
                      .col
                        input(id=`id_${knowledge._id.toString()}`, type="checkbox", data-id=`${knowledge._id.toString()}`, data-title=`${knowledge.title}`, title=`${knowledge.contentMarkdown}`, onclick="knowledgeCheck(this)", checked=(used_knowledge_ids.indexOf(knowledge._id.toString()) >= 0))
                        span(style="cursor: help;", data-bs-toggle="tooltip", data-bs-placement="bottom", title=`${knowledge.contentMarkdown}`)= ` ${knowledge.title}`
          .row 
            .col 
              h3 Voice transcription
              button#recordButton.btn.btn-danger Record
              button#stopButton.btn.btn-secondary(disabled) Stop
              br
              audio#audioPlayback(controls)
              h3 Output 
              textarea#output.form-control
              button.btn.btn-primary(onclick="SetToPrompt()") Set Prompt
      .tab-content
        #knowledge.tab-pane.fade(role="tabpanel" aria-labelledby="knowledge-tab")
          .row 
            .col
              b Save to Knowledge database
              hr
              form(action="/chat4/saveknowledge", method="post") 
                label(for="k_title") Title 
                input#k_title.form-control(type="text", name="k_title", value=`${conversation.title}`, required)
                input#k_conversation_id(type="hidden", name="k_conversation_id", value=`${conversation._id.toString()}`)
                label(for="k_content") Content (markdown)
                textarea#k_content.form-control(name="k_content", cols="30", rows="10")
                .form-group
                  label(for='k_category') Category
                  .input-group.mb-3
                    input#k_category.form-control(type='text', placeholder='Enter category', name='k_category', aria-label='Category', value=`${conversation.category}`)
                    .input-group-append
                      .dropdown
                        button.btn.btn-outline-secondary.dropdown-toggle(type='button', data-bs-toggle='dropdown', aria-expanded="false")
                        ul.dropdown-menu
                          each val in categories
                            li
                              a.dropdown-item(href='#', onclick=`setCategory('k_category', '${val}')`) #{val}
                .form-group
                  label(for='k_tags') Tags (comma separated)
                  .input-group.mb-3
                    input#k_tags.form-control(type='text', placeholder='Enter tags', name='k_tags', aria-label='Tags', value=`${conversation.tags.join(',')}`)
                    .input-group-append
                      .dropdown
                        button.btn.btn-outline-secondary.dropdown-toggle(type='button', data-bs-toggle='dropdown', aria-expanded="false")
                        ul.dropdown-menu
                          each val in tags
                            li
                              a.dropdown-item(href='#', onclick=`setTag('k_tags', '${val.label}')`) #{val.label} (#{val.count})
                label(for="k_images") Images (comma separated filenames)
                input#k_images.form-control(type="text", name="k_images")
                input.btn.btn-primary(type="submit", value="Save", onclick="showLoadingPopup()")
      .tab-content
        #blog.tab-pane.fade(role="tabpanel" aria-labelledby="blog-tab")
          .row 
            .col
              b Post to blog
              hr
              form(action="/chat4/postblog", method="post") 
                label(for="b_title") Title
                input#b_title.form-control(type="text", name="b_title", required)
                label(for="b_category") Category
                input#b_category.form-control(type="text", name="b_category", required)
                label(for="b_content") Content (markdown)
                textarea#b_content.form-control(name="b_content", cols="30", rows="10")
                input.btn.btn-warning(type="submit", value="Post")
      .tab-content
        #healthlog.tab-pane.fade(role="tabpanel" aria-labelledby="healthlog-tab")
          .row 
            .col
              b Save to Health log
              hr
              form(action="#", method="post") 
                label(for="log_date") Date to append entry 
                input#log_date.form-control(type="date", name="log_date", required)
                label(for="log_id") Select entry 
                select#log_id.form-control(name="log_id", onchange="UpdatePreview(this)", required) 
                  option(value="", data-content="Content (select an entry to view)") 
                  each m, i in messages 
                    option(value=m._id.toString(), data-content=m.response_html, title=m.response_html)= `Message ${i}`
                div 
                  h4 Preview 
                  #log_preview Content (select an entry to view)
              button.btn.btn-warning(onclick="AppendToHealthEntry()") Save to health log
      .tab-content
        #rawchat.tab-pane.fade(role="tabpanel" aria-labelledby="rawchat-tab")
          .row 
            .col
              b Raw chat data (markdown)
              hr
              div
                each m in messages
                  div 
                    p.header-row 
                      b Response:
                    pre.assistant.raw-chat-content= m.response
                    if m.sound.length > 0
                      i= `Audio file: ${m.sound}`
                    p.header-row 
                      b Prompt: 
                    if m.images.length > 0
                      each img in m.images
                        div
                          div.chat4_img_wrapper
                            img.chat4_img(src=`/img/${img.filename}`, alt="image", onclick="showModalPopup(this)")
                          i= `Image file: ${img.filename}`
                    pre.user.raw-chat-content= m.prompt
      .tab-content
        #htmlchat.tab-pane.fade(role="tabpanel" aria-labelledby="htmlchat-tab")
          .row 
            .col
              b HTML chat data
              hr
              div
                each m in messages
                  div 
                    p.header-row 
                      b Response:
                    textarea.assistant.form-control(cols="30", rows="10")= m.response_html
                    p.header-row 
                      b Prompt: 
                    textarea.user.form-control(cols="30", rows="10")= m.prompt_html
      .tab-content
        #chatgroup.tab-pane.fade(role="tabpanel" aria-labelledby="chatgroup-tab")
          .row 
            .col
              if copy_conversations.length === 0
                h2 There are no additional chats in this group
              else 
                h2= `${copy_conversations.length} additional chat(s) in this group`
                .button-container
                  each c in copy_conversations
                    .btn-group(role="group")
                      a.btn.btn-info(href=`/chat4/chat/${c._id.toString()}`, title=`${c.description}`)
                        div= c.title
                        div(style="font-size:smaller;")= `(${c.tags.join(', ')})`
                      button.btn.btn-outline-info(style="cursor: help;", data-bs-toggle="tooltip", data-bs-placement="bottom", title=`${c.description}`) info
  #imageModal.modal
    span.close-btn(onclick="closeModalPopup()") &times;
    img#fullSizeImage.modal-content(src="", alt="Full Size Image")
  #loadingPopup.loading-popup
    span.close-btn(onclick="hideLoadingPopup()") &times;
    .loading-content
      .loader
      p Loading...
  script(src="/js/chat4.js") 
