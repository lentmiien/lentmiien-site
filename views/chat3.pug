extends layout

//- PUG INPUT:
//- this_conversation    All messages with given conversation ID
//- chats                Summary of all conversations, with conversation ID, title, and last message
//- new_conversation_id  If new conversation is generated, this id should be used as conversation ID

block content
  .row.chat-history.scroll-end
    #chatmessages.col 
  .row.chat-input
    .col-11
      textarea#input.form-control.chat-textarea(name="input", cols="30", rows="5")
    .col-1
      button.btn.btn-primary(onclick="showTModalPopup()", title="Select template popup") T
      br
      button.btn.btn-primary(onclick="Send()", title="Send message") S
  .row 
    .col 
      select#model.form-control(name="model")
        each model in models 
          if model.api_endpoint == chat_model
            option(value=`${model.api_endpoint}`, selected)= `${model.model_name} (${Math.floor(model.max_tokens/1000)}k tokens) [In: $${model.input_1k_token_cost} / Out: $${model.output_1k_token_cost} per 1k tokens]`
          else 
            option(value=`${model.api_endpoint}`)= `${model.model_name} (${Math.floor(model.max_tokens/1000)}k tokens) [In: $${model.input_1k_token_cost} / Out: $${model.output_1k_token_cost} per 1k tokens]`
  #popup.popup 
    .popup-content 
      span#closePopupBtn.close(onclick="ClosePopup()") &times;
      h2 Message tool
      b Conversation: 
      span#conversation_id= this_conversation.length > 0 ? this_conversation[0].ConversationID : "NEW"
      b  , Message: 
      span#message_id
      .row.chat-history.tool-scroll-end
        #tool_chatmessages.col 
      .row.chat-input
        .col-3
          input#tooltitle(type="text", name="tooltitle")
          label(for="tool_input_context") Context
          textarea#tool_input_context.form-control.chat-textarea(name="tool_input_context", cols="30", rows="3")
        .col-9
          label(for="tool_input") Prompt
          textarea#tool_input.form-control.chat-textarea(name="tool_input", cols="30", rows="5")
      .row
        .col.button-container
          button.btn.btn-primary(onclick="SendTool()") Send message
          button.btn.btn-primary(onclick="showTModalPopup()", title="Select template popup") T
          button.btn.btn-secondary(onclick="SummaryTool(\"summary\")") Create summary
          button.btn.btn-secondary(onclick="SummaryTool(\"combine\")") Combine texts
          button.btn.btn-success(onclick="GenerateImage()") Generate image
          button.btn.btn-success(onclick="GenerateSound()") Text to speech
          button.btn.btn-warning(onclick="OpenKDB()") Generate KDB
          button.btn.btn-warning(onclick="AppendToHealthEntry()") Health Log
      .row 
        .col-6 
          h4 Generate image options
          label(for="quality") Quality 
          select#quality.form-control(name="quality") 
            option(value="standard") Standard
            option(value="hd") HD
          label(for="size") Size 
          select#size.form-control(name="size") 
            option(value="1024x1024") 1024x1024
            option(value="1792x1024") 1792x1024
            option(value="1024x1792") 1024x1792
        .col-6
          h4 Health log date 
          input#healthlogdate.form-control(type="date", name="healthlogdate")
          h4 Generate text-to-speech options
          label(for="ttsmodel") Model 
          select#ttsmodel.form-control(name="ttsmodel") 
            option(value="tts-1") Text-To-Speech 1
            option(value="tts-1-hd") Text-To-Speech 1 HD
          label(for="voice") Voice 
          select#voice.form-control(name="voice") 
            option(value="nova") Nova
            option(value="alloy") Alloy
            option(value="echo") Echo
            option(value="fable") Fable
            option(value="onyx") Onyx
            option(value="shimmer") Shimmer
  #imageModal.modal
    span.close-btn(onclick="closeModalPopup()") &times;
    img#fullSizeImage.modal-content(src="", alt="Full Size Image")
  #templateModal.modal
    .div-group
      h2 Templates
      span.close-btn(onclick="closeTModalPopup()") &times;
      select.form-control(onchange="processTModal(this)")
        option(value="") 
        each type in ["chat", "context", "image"]
          optgroup(label=`${type}`)
            each template in chat_templates
              if template.Type === type
                option(value=`${template._id.toString()}`, title=`${template.TemplateText}`)= `[${template.Category}] ${template.Title}`
    .div-group
      h2 Knowledge
      i *Only works if context is included in "send"
      br
      each k in knowledges
        div(title=`${k.data}`, style="display:inline-block;margin-right: 20px;") 
          input(type="checkbox", name="knowledge", data-name=`${k.title}`, data-id=`${k._id}`, data-templateid=`${k.templateId}`, data-category=`${k.category}`, onclick="ClickKnowledgeCheckbox(this)")
          span= `${k.title} (${k.category})`
  #historyModal.modal
    span.close-btn(onclick="closeHModalPopup()") &times;
  #sticky-action-bar
    button(onclick="copyText()") Copy Text
    button(onclick="copySection()") Copy Section
    button(onclick="copyTitleAndContent()") Copy Title and Content
  #loadingPopup.loading-popup
    .loading-content
      .loader
      p Generating...
  pre#this_conversation.hidden= JSON.stringify(this_conversation)
  pre#chats.hidden= JSON.stringify(chats)
  pre#new_conversation_id.hidden= new_conversation_id
  pre#chat_templates.hidden= JSON.stringify(chat_templates)
  script(src="/chat3.js") 
