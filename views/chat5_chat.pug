extends layout

block content
  h2#conversation_title.chat5-title= conversation.title
  p#id.chat5-meta(data-source=conversationSource)= conversation._id
  .chat5-header-actions.d-flex.gap-2.mb-3
    a.btn.btn-outline-primary(href=`/chat4/createknowledgefromchat/${conversation._id.toString()}`) Create knowledge entry
  - let user = null
  #conversationContainer.chat5-history
    each m in messages 
      if user != m.user_id 
        hr.chat5-divider
        div.userlabel.chat5-user-label(data-user=m.user_id)
          b= m.user_id 
        - user = m.user_id
      - const isBot = typeof m.user_id === 'string' && m.user_id.toUpperCase() === 'BOT'
      div(class={
          'chat5-message': true,
          'chat5-message--hidden': m.hideFromBot,
          'chat5-message--bot': isBot
        })
        if isBot
          img.chat5-avatar(src='/i/avatar.jpg', alt='Bot avatar')
        .chat5-message-body
          if m.contentType === "text"
            span.chat5-message-text(id=`${m._id}textout`)!= m.content.html 
          if m.contentType === "image"
            img.chat5-message-image(src=`/img/${m.content.image}`, alt=m.content.revisedPrompt)
            p.chat5-image-caption
              i= m.content.revisedPrompt
          if m.contentType === "tool"
            div.chat5-message-tool
              i= m.content.toolOutput
          if m.contentType === "reasoning"
            div.chat5-message-reasoning
              i!= m.content.html
  ul#pills-tab.nav.nav-pills.mb-3.chat5-tabs(role="tablist") 
    li.nav-item(role="presentation") 
      button#pills-chat-tab.nav-link.active(data-bs-toggle="pill" data-bs-target="#pills-chat" type="button" role="tab" aria-controls="pills-chat" aria-selected="true") Chat
    li.nav-item(role="presentation") 
      button#pills-settings-tab.nav-link(data-bs-toggle="pill" data-bs-target="#pills-settings" type="button" role="tab" aria-controls="pills-settings" aria-selected="false") Settings
    li.nav-item(role="presentation") 
      button#pills-raw-tab.nav-link(data-bs-toggle="pill" data-bs-target="#pills-raw" type="button" role="tab" aria-controls="pills-raw" aria-selected="false") Raw
  #pills-tabContent.tab-content.chat5-tab-content
    #pills-chat.tab-pane.fade.show.active.chat5-pane(role="tabpanel" aria-labelledby="pills-chat-tab" tabindex="0")
      label.chat5-input-label(for="fileInput") Append image to conversation
      input#fileInput.form-control(type="file", name="fileInput", accept="image/*")
      hr.chat5-divider
      label.chat5-input-label(for="message") Append message to conversation
      // Template selector for chat messages
      .chat5-template-controls.d-flex.align-items-center.flex-wrap.gap-2.mb-2
        label.form-label.mb-0.chat5-input-label(for="messageTemplateSelect") Template
        select#messageTemplateSelect.form-select.form-select-sm.chat5-template-select
          option(value="") -- Select chat template --
          each t in templates
            if t.Type === 'chat'
              option(value=t._id)= t.Category + ' - ' + t.Title
        button#messageTemplateSave.btn.btn-outline-primary.btn-sm(type="button" title="Save current message as template") Save as template
      #message.chat5-editor
      .chat5-send-controls.d-flex.justify-content-evenly.flex-wrap.gap-2
        button.btn.btn-success(onclick="Append(true, false)") Append
        button.btn.btn-success(onclick="Append(true, true)") Send & Response
        button.btn.btn-success(onclick="Append(false, true)") Response
      hr.chat5-divider
      label.chat5-input-label(for="audio") Append audio to conversation
      #audio.chat5-audio
        b.chat5-todo TODO (upload file or record)
    #pills-settings.tab-pane.fade.chat5-pane(role="tabpanel" aria-labelledby="pills-settings-tab" tabindex="0")
      label.chat5-input-label(for="title") Title 
      .input-group.chat5-input-group 
        input#title.form-control(type="title", value=conversation.title)
        button.btn.btn-warning(onclick="GenerateTitle()") AI Generate 
      label.chat5-input-label(for="summary") Summary 
      .d-flex.flex-wrap.gap-2.align-items-start.chat5-summary-group
        textarea#summary.form-control.flex-grow-1(rows="4")= conversation.summary || ''
        button.btn.btn-warning(type="button", onclick="GenerateSummary()") AI Generate
      label.chat5-input-label(for="category") Category 
      input#category.form-control(type="text", value=conversation.category)
      label.chat5-input-label(for="tags") Tags 
      input#tags.form-control(type="text", value=conversation.tags.join(", "))
      label.chat5-input-label(for="context") Context 
      // Template selector for context
      .d-flex.align-items-center.flex-wrap.gap-2.mb-2.chat5-template-controls
        label.form-label.mb-0.chat5-input-label(for="contextTemplateSelect") Template
        select#contextTemplateSelect.form-select.form-select-sm.chat5-template-select
          option(value="") -- Select context template --
          each t in templates
            if t.Type === 'context'
              option(value=t._id)= t.Category + ' - ' + t.Title
        button#contextTemplateSave.btn.btn-outline-primary.btn-sm(type="button" title="Save current context as template") Save as template
      textarea#context.form-control(name="context")= conversation.metadata.contextPrompt
      label.chat5-input-label(for="tools") Tools 
      select#tools.form-control(name="tools", multiple) 
        option(value="image_generation", selected=conversation.metadata.tools.indexOf("image_generation")>=0) Generate Images
        option(value="web_search_preview", selected=conversation.metadata.tools.indexOf("web_search_preview")>=0) Search Web
      label.chat5-input-label(for="model") Model 
      select#model.form-control(name="model") 
        option(value=conversation.metadata.model) Use previous (#{conversation.metadata.model})
        each m in chat_models
          option(value=m.api_model)= m.model_name
      label.chat5-input-label(for="maxMessages") Max messages 
      input#maxMessages.form-control(type="number", min="1", value=conversation.metadata.maxMessages)
      label.chat5-input-label(for="reasoning") Reasoning effort 
      select#reasoning.form-control(name="reasoning") 
        option(value=conversation.metadata.reasoning) Use previous (#{conversation.metadata.reasoning})
        option(value="minimal") Minimal 
        option(value="low") Low 
        option(value="medium") Medium 
        option(value="high") High 
      label.chat5-input-label(for="verbosity") Verbosity 
      select#verbosity.form-control(name="verbosity") 
        option(value=conversation.metadata.verbosity?conversation.metadata.verbosity:"medium") Use previous (#{conversation.metadata.verbosity?conversation.metadata.verbosity:"medium"})
        option(value="low") Low 
        option(value="medium") Medium 
        option(value="high") High 
      label.chat5-input-label(for="members") Members 
      input#members.form-control(type="text", value=conversation.members.join(", "))
      .chat5-update-actions.d-flex.justify-content-evenly.flex-wrap.gap-2
        button#updateSettingsButton.btn.btn-success(type="button", onclick="UpdateConversation()", disabled=conversationSource !== 'conversation5') Update
    #pills-raw.tab-pane.fade.chat5-pane(role="tabpanel" aria-labelledby="pills-raw-tab" tabindex="0")
      h3 Conversation 
      .row 
        .col 
          div 
            b _id: 
            span= conversation._id
          div 
            b title: 
            span= conversation.title
          div 
            b category: 
            span= conversation.category
          div 
            b tags: 
            span= conversation.tags.join(", ")
          div 
            b members: 
            span= conversation.members.join(", ")
          div 
            b Messages: 
            textarea#message_history.form-control(name="message_history")= conversation.messages.join("\n")
            button.btn.btn-primary(onclick="EditMessageArray()") Update message history
        .col 
          h4 Metadata 
          div 
            b contextPrompt: 
            span= conversation.metadata.contextPrompt
          div 
            b model: 
            span= conversation.metadata.model
          div 
            b maxMessages: 
            span= conversation.metadata.maxMessages
          div 
            b maxAudioMessages: 
            span= conversation.metadata.maxAudioMessages
          div 
            b tools: 
            span= conversation.metadata.tools.join(", ")
          div 
            b reasoning: 
            span= conversation.metadata.reasoning
          div 
            b verbosity: 
            span= conversation.metadata.verbosity
          div 
            b outputFormat: 
            span= conversation.metadata.outputFormat
      each m, i in messages 
        h3= `Message#${i}`
        .row 
          .col-3 
            div 
              b _id: 
              span= m._id
            div 
              b user_id: 
              span= m.user_id
            div 
              b category: 
              span= m.category
            div 
              b tags: 
              span= m.tags.join(", ")
            div 
              b contentType: 
              span= m.contentType
            div 
              b Hide from bot: 
              input(type="checkbox", data-id=m._id, checked=m.hideFromBot, onchange="ToggleHideFromBot(this)")
          .col-9
            h4 Content 
            div 
              b text: 
                button.btn.btn-link(data-id=m._id, data-type="text", data-content=m.content.text, onclick=`EditText(this)`) Edit
              pre(id=`${m._id}text`)= m.content.text
            div 
              b image: 
                button.btn.btn-link(data-id=m._id, data-type="image", data-content=m.content.image, onclick=`EditText(this)`) Edit
              pre(id=`${m._id}image`)= m.content.image
            div 
              b audio: 
                button.btn.btn-link(data-id=m._id, data-type="audio", data-content=m.content.audio, onclick=`EditText(this)`) Edit
              pre(id=`${m._id}audio`)= m.content.audio
            div 
              b tts: 
                button.btn.btn-link(data-id=m._id, data-type="tts", data-content=m.content.tts, onclick=`EditText(this)`) Edit
              pre(id=`${m._id}tts`)= m.content.tts
            div 
              b transcript: 
                button.btn.btn-link(data-id=m._id, data-type="transcript", data-content=m.content.transcript, onclick=`EditText(this)`) Edit
              pre(id=`${m._id}transcript`)= m.content.transcript
            div 
              b revisedPrompt: 
                button.btn.btn-link(data-id=m._id, data-type="revisedPrompt", data-content=m.content.revisedPrompt, onclick=`EditText(this)`) Edit
              pre(id=`${m._id}revisedPrompt`)= m.content.revisedPrompt
            div 
              b imageQuality: 
                button.btn.btn-link(data-id=m._id, data-type="imageQuality", data-content=m.content.imageQuality, onclick=`EditText(this)`) Edit
              pre(id=`${m._id}imageQuality`)= m.content.imageQuality
            div 
              b toolOutput: 
                button.btn.btn-link(data-id=m._id, data-type="toolOutput", data-content=m.content.toolOutput, onclick=`EditText(this)`) Edit
              pre(id=`${m._id}toolOutput`)= m.content.toolOutput
  #loadingPopup.loading-popup
    span.close-btn(onclick="hideLoadingPopup()") &times;
    .loading-content
      .loader
      p Loading...
  #editTextModal.modal.fade(tabindex="-1" aria-labelledby="editTextModalLabel" aria-hidden="true")
    .modal-dialog
      .modal-content
        label#text_to_edit_label(for="text_to_edit") text
        textarea#text_to_edit.form-control(name="text_to_edit", cols="50", rows="30")
        input#text_to_edit_id(type="hidden", name="text_to_edit_id")
        input#text_to_edit_type(type="hidden", name="text_to_edit_type")
        button.btn.btn-success(onclick="SaveText()") Save
  script(src="https://cdn.socket.io/4.0.0/socket.io.min.js", defer)
  script(src="https://cdn.jsdelivr.net/npm/marked/marked.min.js", defer)
  script(src="https://uicdn.toast.com/editor/latest/toastui-editor-all.min.js", defer)
  // Expose templates to client-side JS
  script.
    window.chatTemplates = !{JSON.stringify(templates)};
  // Wire template selectors to inputs
  script.
    (function(){
      function byId(id){ return document.getElementById(id); }
      function getTemplateById(id){
        if (!window.chatTemplates || !id) return null;
        return window.chatTemplates.find(t => String(t._id) === String(id));
      }
      // On DOM ready
      document.addEventListener('DOMContentLoaded', function(){
        var msgSel = byId('messageTemplateSelect');
        if (msgSel) {
          msgSel.addEventListener('change', function(e){
            var t = getTemplateById(e.target.value);
            if (t && window.editor && typeof window.editor.setMarkdown === 'function') {
              window.editor.setMarkdown(t.TemplateText || '');
            }
          });
        }
        var msgSave = byId('messageTemplateSave');
        if (msgSave) {
          msgSave.addEventListener('click', function(){
            var title = window.prompt('Enter a title for this chat template:');
            if (!title) return;
            var category = byId('category')?.value || 'General';
            var text = (window.editor && typeof window.editor.getMarkdown === 'function') ? window.editor.getMarkdown() : '';
            var payload = { Title: title, Type: 'chat', Category: category, TemplateText: text };
            // Button state: disable + saving text
            var btn = msgSave;
            var prev = btn.textContent;
            btn.disabled = true; btn.textContent = 'Saving...';
            if (window.socket) {
              window.socket.emit('chat5-savetemplate', payload, function(resp){
                btn.disabled = false; btn.textContent = prev;
                if (!resp || resp.ok !== true) {
                  alert((resp && resp.message) ? resp.message : 'Failed to save template');
                }
              });
            } else {
              btn.disabled = false; btn.textContent = prev;
              alert('Socket not available');
            }
          });
        }
        var ctxSel = byId('contextTemplateSelect');
        if (ctxSel) {
          ctxSel.addEventListener('change', function(e){
            var t = getTemplateById(e.target.value);
            var ta = byId('context');
            if (t && ta) {
              ta.value = t.TemplateText || '';
            }
          });
        }
        var ctxSave = byId('contextTemplateSave');
        if (ctxSave) {
          ctxSave.addEventListener('click', function(){
            var title = window.prompt('Enter a title for this context template:');
            if (!title) return;
            var category = byId('category')?.value || 'General';
            var ta = byId('context');
            var text = ta ? ta.value : '';
            var payload = { Title: title, Type: 'context', Category: category, TemplateText: text };
            // Button state: disable + saving text
            var btn = ctxSave;
            var prev = btn.textContent;
            btn.disabled = true; btn.textContent = 'Saving...';
            if (window.socket) {
              window.socket.emit('chat5-savetemplate', payload, function(resp){
                btn.disabled = false; btn.textContent = prev;
                if (!resp || resp.ok !== true) {
                  alert((resp && resp.message) ? resp.message : 'Failed to save template');
                }
              });
            } else {
              btn.disabled = false; btn.textContent = prev;
              alert('Socket not available');
            }
          });
        }
      });
    })();
  script(src="/js/chat5_5.js", defer)
